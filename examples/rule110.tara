func print(s: int, l: int): int {
    __builtin_syscall(1, 1, s, l, 0, 0, 0)
}

func >=(a: int, b: int): bool = __builtin_cmp_ge(a, b);
func ==(a: int, b: int): bool = __builtin_cmp_eq(a, b);
func &(a: int, b: int): int = __builtin_and(a, b);
func |(a: int, b: int): int = __builtin_or(a, b);
func >>(a: int, b: int): int = __builtin_shr(a, b);
func <<(a: int, b: int): int = __builtin_shl(a, b);
func +(a: int, b: int): int = __builtin_add(a, b);
func -(a: int, b: int): int = __builtin_sub(a, b);
func ~(a: int): int = __builtin_not(a);
func as_int(s: string): int = __builtin_ptr_to_int(s);

func print_arr(n: int) {
    mut i = 0;
    loop {
        if >=(i, 64) {
            break;
        };
        if ==(&(>>(n, i), 1), 1) {
            mut s: int = as_int("*");
            s = +(s, 1);
            print(s, 1);
        } else {
            mut s: int = as_int(" ");
            s = +(s, 1);
            print(s, 1);
        };
        i = +(i, 1);
    };
    mut s: int = as_int("
    );
    s = +(s, 1);
    print(s, 1);
}

func main(): int {
    let trans: int = 110;
    mut arr: int = 1;
    print_arr(arr);
    mut i = 0;
    loop {
        if >=(i, 64) {
            break;
        };
        mut j = 2;
        mut tmp = arr;
        loop {
            if >=(j, 64) {
                break;
            };
            let idx = &(>>(arr, -(j, 2)), 7);
            let state = &(>>(trans, idx), 1);
            let mask = <<(1, -(j, 1));
            if ==(state, 0) {
                tmp = &(tmp, ~ mask);
            } else {
                tmp = |(tmp, mask);
            };
            j = +(j, 1);
        };
        arr = tmp;
        i = +(i, 1);
        print_arr(arr);
    };
    0
}

func _start() {
    let code = main();
    __builtin_syscall(60, code, 0, 0, 0, 0, 0);
}